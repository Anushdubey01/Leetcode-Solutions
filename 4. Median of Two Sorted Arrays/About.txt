# Intuition - 
The problem asks us to find the median of two sorted arrays, which means we need to find the middle value of the combined sorted array.

A simple approach would be to merge the two arrays into a new sorted array and then find the middle value of the combined array. However, this approach would take O(n) space complexity.

To avoid the extra space complexity, we can use a divide and conquer approach to find the median in O(log(m+n)) time complexity.

# Approach - 
1. We can find the middle index of the combined array by calculating the sum of the lengths of the two input arrays, then dividing the result by 2.

2. We can use a binary search approach to find the middle value of the combined array. We can define two pointers, one for each input array, and compare the values at the middle index of both arrays.

3. If the middle value of one array is greater than the other, we can discard the second half of the array with the greater middle value. Otherwise, we can discard the first half of the array with the smaller middle value.

4. We repeat steps 2-3 until we find the middle value of the combined array.

5. If the combined array has an even number of elements, we take the average of the middle two values. Otherwise, we take the middle value.

# Complexity
- Time complexity: The time complexity of the divide and conquer approach is **O(log(m+n))**, since we are cutting the input size in half with each iteration.

The time complexity of the merge approach is O(m+n), since we are iterating over each element of both input arrays. Therefore, the divide and conquer approach is more efficient when m and n are large.

- Space complexity:
The space complexity of the merge approach is **O(m+n)**, since we are creating a new sorted array to store the merged values. 
The space complexity of the divide and conquer approach is**O(1)**, since we are not creating any additional arrays. Therefore, the divide and conquer approach is more efficient in terms of space complexity.