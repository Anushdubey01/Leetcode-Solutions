# Intuition - 
Given an integer `n`, create a matrix with dimensions `n` x `n` and fill it with numbers in a spiral order starting from 1.

# Approach - 
1. Create an empty 2D integer array `ans` of size `n` x `n`.
2. Set a counter variable `count` to 1.
3. Loop through the matrix in a spiral order, starting from the outermost layer and moving towards the center. For each layer:
4. Set the boundaries of the layer using the `min` and `max` variables.
5. Fill the top row of the layer from left to right with values from `count`, incrementing `count` each time.
6. Fill the right column of the layer from top to bottom with values from `count`, incrementing `count` each time.
7. Fill the bottom row of the layer from right to left with values from `count`, incrementing `count` each time.
8. Fill the left column of the layer from bottom to top with values from `count`, incrementing `count` each time.
If `n` is odd, set the center cell of the matrix to the value of `count`.
9. Return the completed matrix.

# Complexity - 
- Time complexity: The loop through the outer layer of the matrix runs `n/2` times, as we are moving towards the center of the matrix from each layer. Within each layer, we perform four loops, each running `max-min` times. The value of `max-min` decreases by 2 for each subsequent layer.
Therefore, the time complexity of this algorithm is **O(n^2).**

- Space complexity: The algorithm creates a 2D integer array `ans` of size `n` x `n` to store the matrix. Therefore, the space complexity of this algorithm is **O(n^2).**
