#Intuition - 
- The program checks if a given string `s` matches a given pattern `p`, where `p` can contain wildcard characters '*' and '.'.
- The '*' character matches zero or more occurrences of the preceding character.
- The '.' character matches any single character.
- The program uses dynamic programming to solve the problem efficiently.

#Approach - 
1. Initialize variables `rows` and `columns` to store the lengths of strings `s` and `p`, respectively.
2. Handle base cases:
   - If both `s` and `p` are empty (`rows == 0` and `columns == 0`), return true since they match.
   - If `p` is empty (`columns == 0`), return false since `s` is not empty but `p` is.
3. Create a 2D boolean array `dp` of size `(rows + 1) x (columns + 1)` to store intermediate results of subproblems.
   - `dp[i][j]` represents whether the substring of `s` from index 0 to `i-1` matches the substring of `p` from index 0 to `j-1`.
4. Set `dp[0][0] = true` since empty strings match.
5. Handle patterns with '*':
   - Iterate from `i = 2` to `columns + 1` (skip 0 and 1).
   - If the current character in `p` is '*', set `dp[0][i]` to the value of `dp[0][i-2]`. This accounts for the case when '*' matches zero occurrences of the preceding character.
6. For the remaining characters of `s` and `p`, iterate through the rows and columns of `dp`:
   - If the current characters in `s` and `p` match (`s.charAt(i - 1) == p.charAt(j - 1)`) or the current character in `p` is '.' (`p.charAt(j - 1) == '.'`), set `dp[i][j]` to the value of `dp[i-1][j-1]`.
   - If the current character in `p` is '*' and `j > 1`, set `dp[i][j]` to the value of `dp[i][j-2]` (case when '*' matches zero occurrences of the preceding character).
     - If the preceding character before '*' in `p` is '.' or matches the current character in `s` (`p.charAt(j - 2) == '.' || p.charAt(j - 2) == s.charAt(i - 1)`), update `dp[i][j]` by performing a logical OR operation with `dp[i-1][j]`.
7. Return the value of `dp[rows][columns]`, which indicates whether the entire string `s` matches the entire pattern `p`.

#Complexity - 
- The time complexity of this solution is *O(rows * columns)* since we iterate through all possible combinations of `s` and `p`.
- The space complexity is *O(rows * columns)* to store the dynamic programming array `dp`.